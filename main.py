import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI
import csv
from datetime import datetime
import os
import aiohttp

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
SERPER_API_KEY = os.getenv('SERPER_API_KEY')


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def save_user_data(user: types.User):
    file_exists = os.path.exists('users_data.csv')

    with open('users_data.csv', mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)

        if not file_exists:
            writer.writerow([
                'Date',
                'User ID',
                'Username',
                'First Name',
                'Last Name',
                'Language Code',
                'Is Bot',
                'Timestamp'
            ])

        writer.writerow([
            datetime.now().strftime("%Y-%m-%d"),
            user.id,
            user.username if user.username else 'Not provided',
            user.first_name if user.first_name else 'Not provided',
            user.last_name if user.last_name else 'Not provided',
            user.language_code if user.language_code else 'Not provided',
            user.is_bot,
            datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        ])


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
async def search_crypto_info(query):
    async with aiohttp.ClientSession() as session:
        headers = {
            'X-API-KEY': SERPER_API_KEY,
            'Content-Type': 'application/json'
        }
        payload = {
            'q': f"crypto {query}",  # –î–æ–±–∞–≤–ª—è–µ–º 'crypto' –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            'num': 3,
            'gl': 'us',  # –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
            'hl': 'ru'  # –Ø–∑—ã–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        }
        try:
            async with session.post('https://google.serper.dev/search',
                                    headers=headers,
                                    json=payload) as response:
                results = await response.json()
                if 'organic' in results:
                    search_results = []
                    for result in results['organic'][:3]:
                        search_results.append({
                            'title': result.get('title', ''),
                            'snippet': result.get('snippet', ''),
                            'link': result.get('link', ''),
                            'date': result.get('date', '')
                        })
                    return search_results
                return []
        except Exception as e:
            logging.error(f"Search error: {e}")
            return []


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –û–±—â–µ–Ω–∏–µ —Å –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–æ–º", callback_data="crypto_chat")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é", callback_data="conference_info")],
        [InlineKeyboardButton(text="üåê –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://blockchainworld.by/")],
        [InlineKeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data="contact_us")]
    ])
    return keyboard


# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º—Ç—ã
CRYPTO_SYSTEM_PROMPT = """You are a Blockchain and Web3 Expert with a unique personality - snarky, unfiltered, and confident, but deeply knowledgeable. Your traits include:

Character & Style:
- Bombastic confidence in your crypto knowledge
- Sarcastic and witty responses that still deliver valuable information
- Not afraid to call out crypto scams and hype with creative humor
- Use occasional creative profanity to emphasize points
- When you don't know something, you explicitly mention that you'll search for the latest info
- Always respond in Russian language!

Response Structure:
1. For questions about current events/prices/news:
   - Acknowledge that you need to check the latest data
   - Use the search results provided to give up-to-date information
   - Add your expert analysis and opinion
   - Include relevant links for users to verify

2. For technical questions:
   - Provide detailed technical explanations
   - Use analogies and examples
   - If needed, supplement with latest developments from search

3. For market/trend questions:
   - Combine your base knowledge with current data
   - Provide balanced analysis
   - Always remind users about DYOR (Do Your Own Research)

Technical Expertise:
- DeFi protocols and smart contract development
- Blockchain platforms: ETH, BTC, BSC, etc.
- Development tools and languages
- Security best practices

Remember: 
- Always verify current prices, news, and trends through search
- Be transparent about using search for latest information
- Maintain your personality while delivering accurate data
- Include relevant links when citing current information
- Warn about risks and encourage independent research
- Always respond in Russian!"""

CONFERENCE_SYSTEM_PROMPT = """–¢—ã - —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –∏ –Ω–µ–º–Ω–æ–≥–æ –¥–µ—Ä–∑–∫–∏–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫—Ä–∏–ø—Ç–æ-–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ BLOCKCHAIN WORLD SUMMIT. 
–¢—ã –æ–±–æ–∂–∞–µ—à—å —Å–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –≥–æ—Ç–æ–≤ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –Ω–µ–º —Å —é–º–æ—Ä–æ–º –∏ —ç–Ω—Ç—É–∑–∏–∞–∑–º–æ–º.

–í–æ—Ç –ø–æ–ª–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –∑–Ω–∞–µ—à—å –Ω–∞–∏–∑—É—Å—Ç—å:

üöÄ –ü–†–û–ì–†–ê–ú–ú–ê BLOCKCHAIN WORLD SUMMIT:

09:00 - –ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤

10:00 - –û–¢–ö–†–´–¢–ò–ï –°–ê–ú–ú–ò–¢–ê:
- 10:00-10:20: –õ–∏–∑–∞ –°–æ—Ç–∏–ª–∏—Å - "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∫–∞–∫ —Å–≤—è–∑—å –ø–æ–∫–æ–ª–µ–Ω–∏–π: –ù–∞—Å–ª–µ–¥–∏–µ –∏ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ —ç–ø–æ—Ö—É —Ü–∏—Ñ—Ä–æ–≤–∏–∑–∞—Ü–∏–∏ –æ–±—â–µ—Å—Ç–≤–∞" + –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã—Å—Ç–∞–≤–∫–∏
- 10:20-10:40: –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∏—Ä–∏–ª–ª–æ–≤ - "–ó–∞–≤—Ç—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —É–∂–µ —Å–µ–≥–æ–¥–Ω—è. –†–∞–∑–≤–∏—Ç–∏–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —ç–ø–æ—Ö—É —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏"
- 10:40-11:20: –ü–∞–Ω–µ–ª—å–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π" (—É—á–∞—Å—Ç–Ω–∏–∫–∏: –í–∞—Å–∏–ª–∏–π –ö—É–ª–µ—à, –ê–Ω–¥—Ä–µ–π –ù–æ–≤–∏–∫–æ–≤, –¢–∞—Ä–∞—Å –ù–∞–¥–æ–ª—å–Ω—ã–π, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–∏—Ä–∏–ª–ª–æ–≤, –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –õ–æ–≥–≤–∏–Ω–æ–≤–∏—á, –ú–∞—Ä–∏–∞–Ω–Ω–∞ –ì–Ω–µ–∑–¥–∏–ª–æ–≤–∞, –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –§–∏–ª–∏–ø–ø–æ–≤, –ê–Ω–¥—Ä–µ–π –•–æ–º–∏—á–µ–Ω–æ–∫)

–£–¢–†–ï–ù–ù–Ø–Ø –°–ï–°–°–ò–Ø:
- 11:20-11:40: –Ø–Ω –î—Ä–∞–Ω–æ–≤—Å–∫–∏–π - "–ú–µ—Ç–∞–≤—Å–µ–ª–µ–Ω–Ω—ã–µ –∏ –∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"
- 11:40-12:00: –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –õ–æ–≥–≤–∏–Ω–æ–≤–∏—á - "–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞"
- 12:00-12:20: –û–ª—å–≥–∞ –§—É—Å–µ–¥–µ—Ä - "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"
- 12:20-13:00: –ò—Ä–∏–Ω–∞ –Ø–Ω–∫–æ–≤—Å–∫–∞—è - "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–≤–µ—Ä–∏–µ: –ü–æ–ª–∏–≥—Ä–∞—Ñ –≤ —Ñ–∏–Ω—Ç–µ—Ö–µ" + –®–æ—É –ø–æ–ª–∏–≥—Ä–∞—Ñ

13:00-13:40: –ü–ï–†–ï–†–´–í + –®–û–£ –ü–†–ò–®–ï–õ–¨–¶–ï–í üëΩ

–î–ù–ï–í–ù–ê–Ø –°–ï–°–°–ò–Ø:
- 13:40-14:00: –Æ—Ä–∏–π –î–µ—Ä–≥–∞—á–µ–≤ (Shamrock) - "–í –∫—Ä–∏–ø—Ç—É –º–æ–∂–µ—Ç –∫–∞–∂–¥—ã–π"
- 14:00-14:20: –ê–Ω–¥—Ä–µ–π –®–ª—ã–∫–æ–≤ - "–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞—Ö"
- 14:20-14:40: –¢–∞—Ä–∞—Å –ù–∞–¥–æ–ª—å–Ω—ã–π - "TradFi vs DeFi: –ì–æ–Ω–∫–∞ –∑–∞ –∫–ª–∏–µ–Ω—Ç–∞"
- 14:40-15:00: –î–µ–Ω–∏—Å –ì—Ä–∏—Ü–∫–µ–≤–∏—á - "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ"
- 15:00-15:20: –ò–≥–æ—Ä—å –ë–∞–µ–ª - "–†–∞–∑–≤–∏—Ç–∏–µ GameFi –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥"
- 15:20-15:40: –†–æ–º–∞–Ω –•–æ—Ä–∏–Ω - "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–µ–Ω–µ–≥"
- 15:40-16:00: –°–æ—Ñ–∏–µ –õ–µ - –¢–µ–º–∞ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è
- 16:00-16:20: –î–º–∏—Ç—Ä–∏–π –°–∞–∫—Å–æ–Ω–æ–≤ - "Blockchain sports ecosystem"
- 16:20-16:40: –°–≤–µ—Ç–∞ –ú–∞–ª–∏–Ω–∏–Ω–∞ - "–ó–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ 2025"
- 16:40-17:00: –ü–∞–≤–µ–ª –ê–Ω–¥—Ä–µ–µ–≤ - "WEB 3.0, CeDeFI"
- 17:00-17:20: –ü–∞–≤–µ–ª –°–∞–≤–∏—á - "–°—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ —Ä—ã–Ω–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
- 17:20-17:40: –¢–∏–º–æ—Ñ–µ–π –î–∞–π–Ω–æ–≤–∏—á –∏ –ê–ª–µ–∫—Å–µ–π –ì—É—Ä–∏–Ω - "–°–µ–∫—Ä–µ—Ç—ã –º–µ–¥–∏–π–Ω–æ–≥–æ —É—Å–ø–µ—Ö–∞"
- 17:40-18:00: –ê–Ω–¥—Ä–µ–π –°–æ–∫–æ–ª–æ–≤ - "–†–∞–∑–≤–∏—Ç–∏–µ —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã TON"

–§–ò–ù–ê–õ:
18:00-19:30: –°–¢–ê–†–¢–ê–ü-–°–ï–°–°–ò–Ø
19:30: –ü–û–î–í–ï–î–ï–ù–ò–ï –ò–¢–û–ì–û–í

–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:
1. –ë—É–¥—å —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º
2. –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–ø–∏–∫–µ—Ä–∞ –∏ –µ–≥–æ —Ç–µ–º—ã
3. –ú–æ–∂–µ—à—å —à—É—Ç–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏
4. –ï—Å–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è - –¥–∞–≤–∞–π —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
5. –£–ø–æ–º–∏–Ω–∞–π –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è—Ö: —à–æ—É –ø—Ä–∏—à–µ–ª—å—Ü–µ–≤, —à–æ—É –ø–æ–ª–∏–≥—Ä–∞—Ñ –∏ –≤—ã—Å—Ç–∞–≤–∫–µ –õ–∏–∑—ã –°–æ—Ç–∏–ª–∏—Å
6. –í—Å–µ–≥–¥–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç–µ https://blockchainworld.by/
7. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –¥–µ—Ç–∞–ª–µ–π, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ - —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–π —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º–∏

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –≤—ã–∑–≤–∞—Ç—å —É –ª—é–¥–µ–π –∂–µ–ª–∞–Ω–∏–µ –ø–æ—Å–µ—Ç–∏—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–µ–º –∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å–ø–∏–∫–µ—Ä–æ–≤!"""


# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT
async def get_gpt_response(prompt, is_crypto=False):
    try:
        messages = []

        if is_crypto:
            # –î–ª—è –∫—Ä–∏–ø—Ç–æ-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            search_results = await search_crypto_info(prompt)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            if search_results:
                search_context = "Based on latest search results:\n"
                for result in search_results:
                    search_context += f"- {result['title']}\n{result['snippet']}\nSource: {result['link']}\n\n"
                messages = [
                    {"role": "system", "content": CRYPTO_SYSTEM_PROMPT},
                    {"role": "user", "content": f"Search results: {search_context}\n\nUser question: {prompt}"}
                ]
            else:
                messages = [
                    {"role": "system", "content": CRYPTO_SYSTEM_PROMPT},
                    {"role": "user", "content": prompt}
                ]
        else:
            # –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º—Ç
            messages = [
                {"role": "system", "content": CONFERENCE_SYSTEM_PROMPT},
                {"role": "user", "content": prompt}
            ]

        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=messages
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"Error in GPT request: {e}")
        return "–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ù–æ –Ω–µ –ø–∞—Ä—å—Å—è, –±—ã–≤–∞–µ—Ç üòÖ –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await save_user_data(message.from_user)

    await message.reply(
        "üëã –ô–æ—É! –Ø —Ç–≤–æ–π –∫—Ä–∏–ø—Ç–æ–±–æ—Ç —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º!\n"
        "–í—ã–±–∏—Ä–∞–π, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –ø–æ–≥–Ω–∞–ª–∏ üöÄ",
        reply_markup=get_main_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def handle_callback(callback_query: types.CallbackQuery):
    if callback_query.data == "crypto_chat":
        await callback_query.message.answer(
            "–†–µ–∂–∏–º –∫—Ä–∏–ø—Ç–æ—ç–∫—Å–ø–µ—Ä—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ü§ñ\n"
            "–î–∞–≤–∞–π –æ–±—Å—É–¥–∏–º –∫—Ä–∏–ø—Ç—É, –±–ª–æ–∫—á–µ–π–Ω –∏–ª–∏ –∫–∞–∫ –æ—á–µ—Ä–µ–¥–Ω–æ–π —Ç–æ–∫–µ–Ω –ø–æ–ª–µ—Ç–µ–ª –Ω–∞ –ª—É–Ω—É! üöÄ"
        )
    elif callback_query.data == "conference_info":
        await callback_query.message.answer(
            "–û –¥–∞, –Ω–∞—à–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è! üìÖ\n"
            "–°–ø—Ä–∞—à–∏–≤–∞–π –≤—Å–µ, —á—Ç–æ —Ö–æ—á–µ—à—å –∑–Ω–∞—Ç—å –æ —Å–∞–º–æ–º –∫—Ä—É—Ç–æ–º –∫—Ä–∏–ø—Ç–æ-—Å–æ–±—ã—Ç–∏–∏!"
        )
    elif callback_query.data == "contact_us":
        contact_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì± Telegram", url="https://t.me/dmitryutlik")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ])
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏:",
            reply_markup=contact_keyboard
        )
    elif callback_query.data == "back_to_main":
        await callback_query.message.answer(
            "–í–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
            reply_markup=get_main_keyboard()
        )

    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def handle_text(message: types.Message):
    if not message.text:
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    is_crypto = "–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü" not in message.text.lower()

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GPT
    response = await get_gpt_response(message.text, is_crypto)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    reply_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_main")]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(response, reply_markup=reply_keyboard)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
